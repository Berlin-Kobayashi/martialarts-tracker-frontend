/**
 * martialarts-tracker
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MartialartsTracker);
  }
}(this, function(expect, MartialartsTracker) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MartialartsTracker.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('exerciseExerciseIdDelete', function() {
      it('should call exerciseExerciseIdDelete successfully', function(done) {
        //uncomment below and update the code to test exerciseExerciseIdDelete
        //instance.exerciseExerciseIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exerciseExerciseIdGet', function() {
      it('should call exerciseExerciseIdGet successfully', function(done) {
        //uncomment below and update the code to test exerciseExerciseIdGet
        //instance.exerciseExerciseIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exerciseExerciseIdPut', function() {
      it('should call exerciseExerciseIdPut successfully', function(done) {
        //uncomment below and update the code to test exerciseExerciseIdPut
        //instance.exerciseExerciseIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exerciseExpandExerciseIdGet', function() {
      it('should call exerciseExpandExerciseIdGet successfully', function(done) {
        //uncomment below and update the code to test exerciseExpandExerciseIdGet
        //instance.exerciseExpandExerciseIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exerciseGet', function() {
      it('should call exerciseGet successfully', function(done) {
        //uncomment below and update the code to test exerciseGet
        //instance.exerciseGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exercisePost', function() {
      it('should call exercisePost successfully', function(done) {
        //uncomment below and update the code to test exercisePost
        //instance.exercisePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exerciseReferencedByExerciseIdGet', function() {
      it('should call exerciseReferencedByExerciseIdGet successfully', function(done) {
        //uncomment below and update the code to test exerciseReferencedByExerciseIdGet
        //instance.exerciseReferencedByExerciseIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metaSwaggerGet', function() {
      it('should call metaSwaggerGet successfully', function(done) {
        //uncomment below and update the code to test metaSwaggerGet
        //instance.metaSwaggerGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('methodExpandMethodIdGet', function() {
      it('should call methodExpandMethodIdGet successfully', function(done) {
        //uncomment below and update the code to test methodExpandMethodIdGet
        //instance.methodExpandMethodIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('methodGet', function() {
      it('should call methodGet successfully', function(done) {
        //uncomment below and update the code to test methodGet
        //instance.methodGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('methodMethodIdDelete', function() {
      it('should call methodMethodIdDelete successfully', function(done) {
        //uncomment below and update the code to test methodMethodIdDelete
        //instance.methodMethodIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('methodMethodIdGet', function() {
      it('should call methodMethodIdGet successfully', function(done) {
        //uncomment below and update the code to test methodMethodIdGet
        //instance.methodMethodIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('methodMethodIdPut', function() {
      it('should call methodMethodIdPut successfully', function(done) {
        //uncomment below and update the code to test methodMethodIdPut
        //instance.methodMethodIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('methodPost', function() {
      it('should call methodPost successfully', function(done) {
        //uncomment below and update the code to test methodPost
        //instance.methodPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('methodReferencedByMethodIdGet', function() {
      it('should call methodReferencedByMethodIdGet successfully', function(done) {
        //uncomment below and update the code to test methodReferencedByMethodIdGet
        //instance.methodReferencedByMethodIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('techniqueExpandTechniqueIdGet', function() {
      it('should call techniqueExpandTechniqueIdGet successfully', function(done) {
        //uncomment below and update the code to test techniqueExpandTechniqueIdGet
        //instance.techniqueExpandTechniqueIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('techniqueGet', function() {
      it('should call techniqueGet successfully', function(done) {
        //uncomment below and update the code to test techniqueGet
        //instance.techniqueGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('techniquePost', function() {
      it('should call techniquePost successfully', function(done) {
        //uncomment below and update the code to test techniquePost
        //instance.techniquePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('techniqueReferencedByTechniqueIdGet', function() {
      it('should call techniqueReferencedByTechniqueIdGet successfully', function(done) {
        //uncomment below and update the code to test techniqueReferencedByTechniqueIdGet
        //instance.techniqueReferencedByTechniqueIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('techniqueTechniqueIdDelete', function() {
      it('should call techniqueTechniqueIdDelete successfully', function(done) {
        //uncomment below and update the code to test techniqueTechniqueIdDelete
        //instance.techniqueTechniqueIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('techniqueTechniqueIdGet', function() {
      it('should call techniqueTechniqueIdGet successfully', function(done) {
        //uncomment below and update the code to test techniqueTechniqueIdGet
        //instance.techniqueTechniqueIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('techniqueTechniqueIdPut', function() {
      it('should call techniqueTechniqueIdPut successfully', function(done) {
        //uncomment below and update the code to test techniqueTechniqueIdPut
        //instance.techniqueTechniqueIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingunitExpandTrainingunitIdGet', function() {
      it('should call trainingunitExpandTrainingunitIdGet successfully', function(done) {
        //uncomment below and update the code to test trainingunitExpandTrainingunitIdGet
        //instance.trainingunitExpandTrainingunitIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingunitGet', function() {
      it('should call trainingunitGet successfully', function(done) {
        //uncomment below and update the code to test trainingunitGet
        //instance.trainingunitGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingunitPost', function() {
      it('should call trainingunitPost successfully', function(done) {
        //uncomment below and update the code to test trainingunitPost
        //instance.trainingunitPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingunitReferencedByTrainingunitIdGet', function() {
      it('should call trainingunitReferencedByTrainingunitIdGet successfully', function(done) {
        //uncomment below and update the code to test trainingunitReferencedByTrainingunitIdGet
        //instance.trainingunitReferencedByTrainingunitIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingunitTrainingunitIdDelete', function() {
      it('should call trainingunitTrainingunitIdDelete successfully', function(done) {
        //uncomment below and update the code to test trainingunitTrainingunitIdDelete
        //instance.trainingunitTrainingunitIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingunitTrainingunitIdGet', function() {
      it('should call trainingunitTrainingunitIdGet successfully', function(done) {
        //uncomment below and update the code to test trainingunitTrainingunitIdGet
        //instance.trainingunitTrainingunitIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingunitTrainingunitIdPut', function() {
      it('should call trainingunitTrainingunitIdPut successfully', function(done) {
        //uncomment below and update the code to test trainingunitTrainingunitIdPut
        //instance.trainingunitTrainingunitIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
