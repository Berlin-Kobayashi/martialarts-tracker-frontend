/**
 * martialarts-tracker
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Exercise from '../model/Exercise';
import ExerciseExpanded from '../model/ExerciseExpanded';
import ExerciseReferencedBy from '../model/ExerciseReferencedBy';
import Method from '../model/Method';
import MethodExpanded from '../model/MethodExpanded';
import MethodReferencedBy from '../model/MethodReferencedBy';
import Technique from '../model/Technique';
import TechniqueExpanded from '../model/TechniqueExpanded';
import TechniqueReferencedBy from '../model/TechniqueReferencedBy';
import Trainingunit from '../model/Trainingunit';
import TrainingunitExpanded from '../model/TrainingunitExpanded';
import TrainingunitReferencedBy from '../model/TrainingunitReferencedBy';

/**
* Default service.
* @module api/DefaultApi
* @version 0.0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the exerciseExerciseIdDelete operation.
     * @callback module:api/DefaultApi~exerciseExerciseIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} exerciseId ID of the exercise
     * @param {module:api/DefaultApi~exerciseExerciseIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exerciseExerciseIdDelete(exerciseId, callback) {
      let postBody = null;

      // verify the required parameter 'exerciseId' is set
      if (exerciseId === undefined || exerciseId === null) {
        throw new Error("Missing the required parameter 'exerciseId' when calling exerciseExerciseIdDelete");
      }


      let pathParams = {
        'exerciseId': exerciseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/exercise/{exerciseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exerciseExerciseIdGet operation.
     * @callback module:api/DefaultApi~exerciseExerciseIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} exerciseId ID of the exercise
     * @param {module:api/DefaultApi~exerciseExerciseIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    exerciseExerciseIdGet(exerciseId, callback) {
      let postBody = null;

      // verify the required parameter 'exerciseId' is set
      if (exerciseId === undefined || exerciseId === null) {
        throw new Error("Missing the required parameter 'exerciseId' when calling exerciseExerciseIdGet");
      }


      let pathParams = {
        'exerciseId': exerciseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Exercise;

      return this.apiClient.callApi(
        '/exercise/{exerciseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exerciseExerciseIdPut operation.
     * @callback module:api/DefaultApi~exerciseExerciseIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} exerciseId ID of the exercise
     * @param {module:model/Exercise} body ID of the exercise
     * @param {module:api/DefaultApi~exerciseExerciseIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    exerciseExerciseIdPut(exerciseId, body, callback) {
      let postBody = body;

      // verify the required parameter 'exerciseId' is set
      if (exerciseId === undefined || exerciseId === null) {
        throw new Error("Missing the required parameter 'exerciseId' when calling exerciseExerciseIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exerciseExerciseIdPut");
      }


      let pathParams = {
        'exerciseId': exerciseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Exercise;

      return this.apiClient.callApi(
        '/exercise/{exerciseId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exerciseExpandExerciseIdGet operation.
     * @callback module:api/DefaultApi~exerciseExpandExerciseIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExerciseExpanded} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} exerciseId ID of the exercise
     * @param {module:api/DefaultApi~exerciseExpandExerciseIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExerciseExpanded}
     */
    exerciseExpandExerciseIdGet(exerciseId, callback) {
      let postBody = null;

      // verify the required parameter 'exerciseId' is set
      if (exerciseId === undefined || exerciseId === null) {
        throw new Error("Missing the required parameter 'exerciseId' when calling exerciseExpandExerciseIdGet");
      }


      let pathParams = {
        'exerciseId': exerciseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ExerciseExpanded;

      return this.apiClient.callApi(
        '/exercise/expand/{exerciseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exerciseGet operation.
     * @callback module:api/DefaultApi~exerciseGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Exercise>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~exerciseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Exercise>}
     */
    exerciseGet(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = [Exercise];

      return this.apiClient.callApi(
        '/exercise', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exercisePost operation.
     * @callback module:api/DefaultApi~exercisePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Exercise} body ID of the exercise
     * @param {module:api/DefaultApi~exercisePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    exercisePost(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exercisePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Exercise;

      return this.apiClient.callApi(
        '/exercise', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exerciseReferencedByExerciseIdGet operation.
     * @callback module:api/DefaultApi~exerciseReferencedByExerciseIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExerciseReferencedBy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} exerciseId ID of the exercise
     * @param {module:api/DefaultApi~exerciseReferencedByExerciseIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExerciseReferencedBy}
     */
    exerciseReferencedByExerciseIdGet(exerciseId, callback) {
      let postBody = null;

      // verify the required parameter 'exerciseId' is set
      if (exerciseId === undefined || exerciseId === null) {
        throw new Error("Missing the required parameter 'exerciseId' when calling exerciseReferencedByExerciseIdGet");
      }


      let pathParams = {
        'exerciseId': exerciseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = ExerciseReferencedBy;

      return this.apiClient.callApi(
        '/exercise/referenced-by/{exerciseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metaSwaggerGet operation.
     * @callback module:api/DefaultApi~metaSwaggerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~metaSwaggerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metaSwaggerGet(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/meta/swagger', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the methodExpandMethodIdGet operation.
     * @callback module:api/DefaultApi~methodExpandMethodIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MethodExpanded} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} methodId ID of the method
     * @param {module:api/DefaultApi~methodExpandMethodIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MethodExpanded}
     */
    methodExpandMethodIdGet(methodId, callback) {
      let postBody = null;

      // verify the required parameter 'methodId' is set
      if (methodId === undefined || methodId === null) {
        throw new Error("Missing the required parameter 'methodId' when calling methodExpandMethodIdGet");
      }


      let pathParams = {
        'methodId': methodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = MethodExpanded;

      return this.apiClient.callApi(
        '/method/expand/{methodId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the methodGet operation.
     * @callback module:api/DefaultApi~methodGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Method>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~methodGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Method>}
     */
    methodGet(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = [Method];

      return this.apiClient.callApi(
        '/method', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the methodMethodIdDelete operation.
     * @callback module:api/DefaultApi~methodMethodIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} methodId ID of the method
     * @param {module:api/DefaultApi~methodMethodIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    methodMethodIdDelete(methodId, callback) {
      let postBody = null;

      // verify the required parameter 'methodId' is set
      if (methodId === undefined || methodId === null) {
        throw new Error("Missing the required parameter 'methodId' when calling methodMethodIdDelete");
      }


      let pathParams = {
        'methodId': methodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/method/{methodId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the methodMethodIdGet operation.
     * @callback module:api/DefaultApi~methodMethodIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Method} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} methodId ID of the method
     * @param {module:api/DefaultApi~methodMethodIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Method}
     */
    methodMethodIdGet(methodId, callback) {
      let postBody = null;

      // verify the required parameter 'methodId' is set
      if (methodId === undefined || methodId === null) {
        throw new Error("Missing the required parameter 'methodId' when calling methodMethodIdGet");
      }


      let pathParams = {
        'methodId': methodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Method;

      return this.apiClient.callApi(
        '/method/{methodId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the methodMethodIdPut operation.
     * @callback module:api/DefaultApi~methodMethodIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Method} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} methodId ID of the method
     * @param {module:model/Method} body ID of the method
     * @param {module:api/DefaultApi~methodMethodIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Method}
     */
    methodMethodIdPut(methodId, body, callback) {
      let postBody = body;

      // verify the required parameter 'methodId' is set
      if (methodId === undefined || methodId === null) {
        throw new Error("Missing the required parameter 'methodId' when calling methodMethodIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling methodMethodIdPut");
      }


      let pathParams = {
        'methodId': methodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Method;

      return this.apiClient.callApi(
        '/method/{methodId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the methodPost operation.
     * @callback module:api/DefaultApi~methodPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Method} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Method} body ID of the method
     * @param {module:api/DefaultApi~methodPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Method}
     */
    methodPost(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling methodPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Method;

      return this.apiClient.callApi(
        '/method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the methodReferencedByMethodIdGet operation.
     * @callback module:api/DefaultApi~methodReferencedByMethodIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MethodReferencedBy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} methodId ID of the method
     * @param {module:api/DefaultApi~methodReferencedByMethodIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MethodReferencedBy}
     */
    methodReferencedByMethodIdGet(methodId, callback) {
      let postBody = null;

      // verify the required parameter 'methodId' is set
      if (methodId === undefined || methodId === null) {
        throw new Error("Missing the required parameter 'methodId' when calling methodReferencedByMethodIdGet");
      }


      let pathParams = {
        'methodId': methodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = MethodReferencedBy;

      return this.apiClient.callApi(
        '/method/referenced-by/{methodId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the techniqueExpandTechniqueIdGet operation.
     * @callback module:api/DefaultApi~techniqueExpandTechniqueIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TechniqueExpanded} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} techniqueId ID of the technique
     * @param {module:api/DefaultApi~techniqueExpandTechniqueIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TechniqueExpanded}
     */
    techniqueExpandTechniqueIdGet(techniqueId, callback) {
      let postBody = null;

      // verify the required parameter 'techniqueId' is set
      if (techniqueId === undefined || techniqueId === null) {
        throw new Error("Missing the required parameter 'techniqueId' when calling techniqueExpandTechniqueIdGet");
      }


      let pathParams = {
        'techniqueId': techniqueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = TechniqueExpanded;

      return this.apiClient.callApi(
        '/technique/expand/{techniqueId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the techniqueGet operation.
     * @callback module:api/DefaultApi~techniqueGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Technique>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~techniqueGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Technique>}
     */
    techniqueGet(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = [Technique];

      return this.apiClient.callApi(
        '/technique', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the techniquePost operation.
     * @callback module:api/DefaultApi~techniquePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Technique} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Technique} body ID of the technique
     * @param {module:api/DefaultApi~techniquePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Technique}
     */
    techniquePost(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling techniquePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Technique;

      return this.apiClient.callApi(
        '/technique', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the techniqueReferencedByTechniqueIdGet operation.
     * @callback module:api/DefaultApi~techniqueReferencedByTechniqueIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TechniqueReferencedBy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} techniqueId ID of the technique
     * @param {module:api/DefaultApi~techniqueReferencedByTechniqueIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TechniqueReferencedBy}
     */
    techniqueReferencedByTechniqueIdGet(techniqueId, callback) {
      let postBody = null;

      // verify the required parameter 'techniqueId' is set
      if (techniqueId === undefined || techniqueId === null) {
        throw new Error("Missing the required parameter 'techniqueId' when calling techniqueReferencedByTechniqueIdGet");
      }


      let pathParams = {
        'techniqueId': techniqueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = TechniqueReferencedBy;

      return this.apiClient.callApi(
        '/technique/referenced-by/{techniqueId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the techniqueTechniqueIdDelete operation.
     * @callback module:api/DefaultApi~techniqueTechniqueIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} techniqueId ID of the technique
     * @param {module:api/DefaultApi~techniqueTechniqueIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    techniqueTechniqueIdDelete(techniqueId, callback) {
      let postBody = null;

      // verify the required parameter 'techniqueId' is set
      if (techniqueId === undefined || techniqueId === null) {
        throw new Error("Missing the required parameter 'techniqueId' when calling techniqueTechniqueIdDelete");
      }


      let pathParams = {
        'techniqueId': techniqueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/technique/{techniqueId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the techniqueTechniqueIdGet operation.
     * @callback module:api/DefaultApi~techniqueTechniqueIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Technique} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} techniqueId ID of the technique
     * @param {module:api/DefaultApi~techniqueTechniqueIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Technique}
     */
    techniqueTechniqueIdGet(techniqueId, callback) {
      let postBody = null;

      // verify the required parameter 'techniqueId' is set
      if (techniqueId === undefined || techniqueId === null) {
        throw new Error("Missing the required parameter 'techniqueId' when calling techniqueTechniqueIdGet");
      }


      let pathParams = {
        'techniqueId': techniqueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Technique;

      return this.apiClient.callApi(
        '/technique/{techniqueId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the techniqueTechniqueIdPut operation.
     * @callback module:api/DefaultApi~techniqueTechniqueIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Technique} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} techniqueId ID of the technique
     * @param {module:model/Technique} body ID of the technique
     * @param {module:api/DefaultApi~techniqueTechniqueIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Technique}
     */
    techniqueTechniqueIdPut(techniqueId, body, callback) {
      let postBody = body;

      // verify the required parameter 'techniqueId' is set
      if (techniqueId === undefined || techniqueId === null) {
        throw new Error("Missing the required parameter 'techniqueId' when calling techniqueTechniqueIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling techniqueTechniqueIdPut");
      }


      let pathParams = {
        'techniqueId': techniqueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Technique;

      return this.apiClient.callApi(
        '/technique/{techniqueId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trainingunitExpandTrainingunitIdGet operation.
     * @callback module:api/DefaultApi~trainingunitExpandTrainingunitIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainingunitExpanded} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trainingunitId ID of the trainingunit
     * @param {module:api/DefaultApi~trainingunitExpandTrainingunitIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainingunitExpanded}
     */
    trainingunitExpandTrainingunitIdGet(trainingunitId, callback) {
      let postBody = null;

      // verify the required parameter 'trainingunitId' is set
      if (trainingunitId === undefined || trainingunitId === null) {
        throw new Error("Missing the required parameter 'trainingunitId' when calling trainingunitExpandTrainingunitIdGet");
      }


      let pathParams = {
        'trainingunitId': trainingunitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = TrainingunitExpanded;

      return this.apiClient.callApi(
        '/trainingunit/expand/{trainingunitId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trainingunitGet operation.
     * @callback module:api/DefaultApi~trainingunitGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Trainingunit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~trainingunitGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Trainingunit>}
     */
    trainingunitGet(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = [Trainingunit];

      return this.apiClient.callApi(
        '/trainingunit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trainingunitPost operation.
     * @callback module:api/DefaultApi~trainingunitPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trainingunit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Trainingunit} body ID of the trainingunit
     * @param {module:api/DefaultApi~trainingunitPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trainingunit}
     */
    trainingunitPost(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling trainingunitPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Trainingunit;

      return this.apiClient.callApi(
        '/trainingunit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trainingunitReferencedByTrainingunitIdGet operation.
     * @callback module:api/DefaultApi~trainingunitReferencedByTrainingunitIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainingunitReferencedBy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trainingunitId ID of the trainingunit
     * @param {module:api/DefaultApi~trainingunitReferencedByTrainingunitIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainingunitReferencedBy}
     */
    trainingunitReferencedByTrainingunitIdGet(trainingunitId, callback) {
      let postBody = null;

      // verify the required parameter 'trainingunitId' is set
      if (trainingunitId === undefined || trainingunitId === null) {
        throw new Error("Missing the required parameter 'trainingunitId' when calling trainingunitReferencedByTrainingunitIdGet");
      }


      let pathParams = {
        'trainingunitId': trainingunitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = TrainingunitReferencedBy;

      return this.apiClient.callApi(
        '/trainingunit/referenced-by/{trainingunitId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trainingunitTrainingunitIdDelete operation.
     * @callback module:api/DefaultApi~trainingunitTrainingunitIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trainingunitId ID of the trainingunit
     * @param {module:api/DefaultApi~trainingunitTrainingunitIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trainingunitTrainingunitIdDelete(trainingunitId, callback) {
      let postBody = null;

      // verify the required parameter 'trainingunitId' is set
      if (trainingunitId === undefined || trainingunitId === null) {
        throw new Error("Missing the required parameter 'trainingunitId' when calling trainingunitTrainingunitIdDelete");
      }


      let pathParams = {
        'trainingunitId': trainingunitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/trainingunit/{trainingunitId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trainingunitTrainingunitIdGet operation.
     * @callback module:api/DefaultApi~trainingunitTrainingunitIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trainingunit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trainingunitId ID of the trainingunit
     * @param {module:api/DefaultApi~trainingunitTrainingunitIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trainingunit}
     */
    trainingunitTrainingunitIdGet(trainingunitId, callback) {
      let postBody = null;

      // verify the required parameter 'trainingunitId' is set
      if (trainingunitId === undefined || trainingunitId === null) {
        throw new Error("Missing the required parameter 'trainingunitId' when calling trainingunitTrainingunitIdGet");
      }


      let pathParams = {
        'trainingunitId': trainingunitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Trainingunit;

      return this.apiClient.callApi(
        '/trainingunit/{trainingunitId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trainingunitTrainingunitIdPut operation.
     * @callback module:api/DefaultApi~trainingunitTrainingunitIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trainingunit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} trainingunitId ID of the trainingunit
     * @param {module:model/Trainingunit} body ID of the trainingunit
     * @param {module:api/DefaultApi~trainingunitTrainingunitIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trainingunit}
     */
    trainingunitTrainingunitIdPut(trainingunitId, body, callback) {
      let postBody = body;

      // verify the required parameter 'trainingunitId' is set
      if (trainingunitId === undefined || trainingunitId === null) {
        throw new Error("Missing the required parameter 'trainingunitId' when calling trainingunitTrainingunitIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling trainingunitTrainingunitIdPut");
      }


      let pathParams = {
        'trainingunitId': trainingunitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Trainingunit;

      return this.apiClient.callApi(
        '/trainingunit/{trainingunitId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
